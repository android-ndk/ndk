From 21d74c18883574c8c601d66fc455f8ea3b099b49 Mon Sep 17 00:00:00 2001
From: Logan Chien <loganchien@google.com>
Date: Wed, 26 Sep 2012 16:01:26 +0800
Subject: [PATCH 22/23] Fix va_list name mangling issue on ARM.

Backported from the patch by Weiming Zhao.
---
 include/clang/Basic/TargetInfo.h  |    2 +-
 lib/AST/ExprClassification.cpp    |    5 ++++-
 lib/Basic/Targets.cpp             |   36 ++++++++++++++++++++----------------
 lib/Frontend/InitPreprocessor.cpp |    2 +-
 test/Sema/builtins-arm.c          |    7 ++++---
 5 files changed, 30 insertions(+), 22 deletions(-)

diff --git a/include/clang/Basic/TargetInfo.h b/include/clang/Basic/TargetInfo.h
index a03cf83..3e22582 100644
--- a/include/clang/Basic/TargetInfo.h
+++ b/include/clang/Basic/TargetInfo.h
@@ -381,7 +381,7 @@ public:
 
   /// getVAListDeclaration - Return the declaration to use for
   /// __builtin_va_list, which is target-specific.
-  virtual const char *getVAListDeclaration() const = 0;
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const = 0;
 
   /// isValidClobber - Returns whether the passed in string is
   /// a valid clobber in an inline asm statement. This is used by
diff --git a/lib/AST/ExprClassification.cpp b/lib/AST/ExprClassification.cpp
index b091e19..0b94c75 100644
--- a/lib/AST/ExprClassification.cpp
+++ b/lib/AST/ExprClassification.cpp
@@ -580,7 +580,10 @@ static Cl::ModifiableType IsModifiable(ASTContext &Ctx, const Expr *E,
   // Records with any const fields (recursively) are not modifiable.
   if (const RecordType *R = CT->getAs<RecordType>()) {
     assert((E->getObjectKind() == OK_ObjCProperty ||
-            !Ctx.getLangOpts().CPlusPlus) &&
+            !Ctx.getLangOpts().CPlusPlus ||
+            (isa<CXXRecordDecl>(R->getDecl()) &&
+             !(cast<CXXRecordDecl>(R->getDecl())->
+               hasUserDeclaredCopyConstructor()))) &&
            "C++ struct assignment should be resolved by the "
            "copy assignment operator.");
     if (R->hasConstFields())
diff --git a/lib/Basic/Targets.cpp b/lib/Basic/Targets.cpp
index 5fae886..30d803c 100644
--- a/lib/Basic/Targets.cpp
+++ b/lib/Basic/Targets.cpp
@@ -880,7 +880,7 @@ public:
     }
   }
 
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     // This is the ELF definition, and is overridden by the Darwin sub-target
     return "typedef struct __va_list_tag {"
            "  unsigned char gpr;"
@@ -909,7 +909,7 @@ public:
       LongDoubleFormat = &llvm::APFloat::IEEEdouble;
     }
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef char* __builtin_va_list;";
   }
 };
@@ -929,7 +929,7 @@ public:
     DescriptionString = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-"
                         "i64:32:64-f32:32:32-f64:64:64-v128:128:128-n32";
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef char* __builtin_va_list;";
   }
 };
@@ -1013,7 +1013,7 @@ namespace {
       // FIXME: Is this really right?
       return "";
     }
-    virtual const char *getVAListDeclaration() const {
+    virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
       // FIXME: implement
       return "typedef char* __builtin_va_list;";
     }
@@ -1098,7 +1098,7 @@ public:
     return Feature == "mblaze";
   }
   
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef char* __builtin_va_list;";
   }
   virtual const char *getTargetPrefix() const {
@@ -2240,7 +2240,7 @@ public:
     // MaxAtomicInlineWidth. (cmpxchg8b is an i586 instruction.)
     MaxAtomicPromoteWidth = MaxAtomicInlineWidth = 64;
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef char* __builtin_va_list;";
   }
 
@@ -2500,7 +2500,7 @@ public:
     MaxAtomicPromoteWidth = 128;
     MaxAtomicInlineWidth = 64;
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef struct __va_list_tag {"
            "  unsigned gp_offset;"
            "  unsigned fp_offset;"
@@ -2541,7 +2541,7 @@ public:
     WindowsTargetInfo<X86_64TargetInfo>::getTargetDefines(Opts, Builder);
     Builder.defineMacro("_WIN64");
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef char* __builtin_va_list;";
   }
 };
@@ -2873,8 +2873,12 @@ public:
     NumRecords = clang::ARM::LastTSBuiltin-Builtin::FirstTSBuiltin;
   }
   virtual bool isCLZForZeroUndef() const { return false; }
-  virtual const char *getVAListDeclaration() const {
-    return "typedef void* __builtin_va_list;";
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
+    return IsCPlusPlus ?
+      ("namespace std { struct __va_list { void *__ap; }; }\n"
+       "typedef std::__va_list __builtin_va_list;\n") :
+      ("struct __va_list { void *__ap; };\n"
+       "typedef struct __va_list __builtin_va_list;\n");
   }
   virtual void getGCCRegNames(const char * const *&Names,
                               unsigned &NumNames) const;
@@ -3054,7 +3058,7 @@ public:
     return Feature == "hexagon";
   }
   
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef char* __builtin_va_list;";
   }
   virtual void getGCCRegNames(const char * const *&Names,
@@ -3213,7 +3217,7 @@ public:
                                  unsigned &NumRecords) const {
     // FIXME: Implement!
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef void* __builtin_va_list;";
   }
   virtual void getGCCRegNames(const char * const *&Names,
@@ -3357,7 +3361,7 @@ namespace {
       // FIXME: Is this really right?
       return "";
     }
-    virtual const char *getVAListDeclaration() const {
+    virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
       // FIXME: implement
       return "typedef char* __builtin_va_list;";
    }
@@ -3438,7 +3442,7 @@ namespace {
     virtual const char *getClobbers() const {
       return "";
     }
-    virtual const char *getVAListDeclaration() const {
+    virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
       return "typedef void* __builtin_va_list;";
     }
     virtual void getGCCRegNames(const char * const *&Names,
@@ -3510,7 +3514,7 @@ public:
   virtual bool hasFeature(StringRef Feature) const {
     return Feature == "mips";
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef void* __builtin_va_list;";
   }
   virtual void getGCCRegNames(const char * const *&Names,
@@ -3884,7 +3888,7 @@ public:
   virtual void getTargetBuiltins(const Builtin::Info *&Records,
                                  unsigned &NumRecords) const {
   }
-  virtual const char *getVAListDeclaration() const {
+  virtual const char *getVAListDeclaration(bool IsCPlusPlus) const {
     return "typedef int __builtin_va_list[4];";
   }
   virtual void getGCCRegNames(const char * const *&Names,
diff --git a/lib/Frontend/InitPreprocessor.cpp b/lib/Frontend/InitPreprocessor.cpp
index 9d059c5..5f64484 100644
--- a/lib/Frontend/InitPreprocessor.cpp
+++ b/lib/Frontend/InitPreprocessor.cpp
@@ -522,7 +522,7 @@ static void InitializePredefinedMacros(const TargetInfo &TI,
     DefineExactWidthIntType(TargetInfo::SignedLongLong, TI, Builder);
 
   // Add __builtin_va_list typedef.
-  Builder.append(TI.getVAListDeclaration());
+  Builder.append(TI.getVAListDeclaration(LangOpts.CPlusPlus));
 
   if (const char *Prefix = TI.getUserLabelPrefix())
     Builder.defineMacro("__USER_LABEL_PREFIX__", Prefix);
diff --git a/test/Sema/builtins-arm.c b/test/Sema/builtins-arm.c
index 4077240..0763e06 100644
--- a/test/Sema/builtins-arm.c
+++ b/test/Sema/builtins-arm.c
@@ -9,8 +9,9 @@ void __clear_cache(char*, char*);
 void __clear_cache(void*, void*);
 #endif
 
-// va_list on ARM is void*.
+// va_list on ARM is struct { void* __ap }.
 void test2() {
-  __builtin_va_list ptr = "x";
-  *ptr = '0'; // expected-error {{incomplete type 'void' is not assignable}}
+  __builtin_va_list ptr;
+  ptr.__ap = "x";
+  *(ptr.__ap) = '0'; // expected-error {{incomplete type 'void' is not assignable}}
 }
-- 
1.7.7.3

