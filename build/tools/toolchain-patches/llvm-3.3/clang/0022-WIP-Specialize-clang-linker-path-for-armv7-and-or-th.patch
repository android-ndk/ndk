From 89863aac88f7c36971afb1e481e2921c29adbbcd Mon Sep 17 00:00:00 2001
From: Logan Chien <tzuhsiang.chien@gmail.com>
Date: Wed, 29 May 2013 18:45:12 +0800
Subject: [PATCH 22/29] [WIP] Specialize clang linker path for armv7 and/or
 thumb.

[WORK IN PROGRESS] Test cases are missing.
---
 lib/Driver/ToolChains.cpp | 45 +++++++++++++++++++++++++++++++++++++++------
 lib/Driver/ToolChains.h   |  2 +-
 2 files changed, 40 insertions(+), 7 deletions(-)

diff --git a/lib/Driver/ToolChains.cpp b/lib/Driver/ToolChains.cpp
index 8c9ea1c..bbe3b91 100644
--- a/lib/Driver/ToolChains.cpp
+++ b/lib/Driver/ToolChains.cpp
@@ -1079,7 +1079,6 @@ Generic_GCC::GCCInstallationDetector::GCCInstallationDetector(
   llvm::Triple MultiarchTriple
     = TargetTriple.isArch32Bit() ? TargetTriple.get64BitArchVariant()
                                  : TargetTriple.get32BitArchVariant();
-  llvm::Triple::ArchType TargetArch = TargetTriple.getArch();
   // The library directories which may contain GCC installations.
   SmallVector<StringRef, 4> CandidateLibDirs, CandidateMultiarchLibDirs;
   // The compatible GCC triples for this particular architecture.
@@ -1117,7 +1116,7 @@ Generic_GCC::GCCInstallationDetector::GCCInstallationDetector(
       if (!llvm::sys::fs::exists(LibDir))
         continue;
       for (unsigned k = 0, ke = CandidateTripleAliases.size(); k < ke; ++k)
-        ScanLibDirForGCCTriple(TargetArch, Args, LibDir,
+        ScanLibDirForGCCTriple(TargetTriple, Args, LibDir,
                                CandidateTripleAliases[k]);
     }
     for (unsigned j = 0, je = CandidateMultiarchLibDirs.size(); j < je; ++j) {
@@ -1127,7 +1126,7 @@ Generic_GCC::GCCInstallationDetector::GCCInstallationDetector(
         continue;
       for (unsigned k = 0, ke = CandidateMultiarchTripleAliases.size(); k < ke;
            ++k)
-        ScanLibDirForGCCTriple(TargetArch, Args, LibDir,
+        ScanLibDirForGCCTriple(TargetTriple, Args, LibDir,
                                CandidateMultiarchTripleAliases[k],
                                /*NeedsMultiarchSuffix=*/true);
     }
@@ -1410,10 +1409,40 @@ static StringRef getMipsTargetABISuffix(llvm::Triple::ArchType TargetArch,
   return "/32";
 }
 
+static StringRef getARMTargetABISuffix(const llvm::Triple &TargetTriple,
+                                       const ArgList &Args) {
+  bool IsV7a = false;
+  bool IsThumb = TargetTriple.getArch() == llvm::Triple::thumb;
+
+  // Get IsV7a from target triple
+  StringRef ArchName(TargetTriple.getArchName());
+  if (ArchName.startswith("armv7") || ArchName.startswith("thumbv7")) {
+    IsV7a = true;
+  }
+
+  // Override target triple with -march
+  if (const Arg *A = Args.getLastArg(options::OPT_march_EQ)) {
+    IsV7a = (strcmp(A->getValue(), "armv7-a") == 0);
+  }
+
+  // Override target triple with -mthumb or -mno-thumb
+  if (const Arg *A = Args.getLastArg(options::OPT_mthumb,
+                                     options::OPT_mno_thumb)) {
+    IsThumb = A->getOption().matches(options::OPT_mthumb);
+  }
+
+  if (IsV7a) {
+    return IsThumb ? "/armv7-a/thumb" : "/armv7-a";
+  } else {
+    return IsThumb ? "/thumb" : "";
+  }
+}
+
 static bool findTargetMultiarchSuffix(std::string &Suffix,
                                       StringRef Path,
-                                      llvm::Triple::ArchType TargetArch,
+                                      const llvm::Triple &TargetTriple,
                                       const ArgList &Args) {
+  llvm::Triple::ArchType TargetArch = TargetTriple.getArch();
   if (isMipsArch(TargetArch)) {
     StringRef ABISuffix = getMipsTargetABISuffix(TargetArch, Args);
 
@@ -1442,13 +1471,17 @@ static bool findTargetMultiarchSuffix(std::string &Suffix,
   else
     Suffix = "/32";
 
+  if (TargetArch == llvm::Triple::arm || TargetArch == llvm::Triple::thumb)
+    Suffix = getARMTargetABISuffix(TargetTriple, Args);
+
   return llvm::sys::fs::exists(Path + Suffix + "/crtbegin.o");
 }
 
 void Generic_GCC::GCCInstallationDetector::ScanLibDirForGCCTriple(
-    llvm::Triple::ArchType TargetArch, const ArgList &Args,
+    const llvm::Triple &TargetTriple, const ArgList &Args,
     const std::string &LibDir,
     StringRef CandidateTriple, bool NeedsMultiarchSuffix) {
+  llvm::Triple::ArchType TargetArch = TargetTriple.getArch();
   // There are various different suffixes involving the triple we
   // check for. We also record what is necessary to walk from each back
   // up to the lib directory.
@@ -1497,7 +1530,7 @@ void Generic_GCC::GCCInstallationDetector::ScanLibDirForGCCTriple(
 
       std::string MultiarchSuffix;
       if (findTargetMultiarchSuffix(MultiarchSuffix,
-                                    LI->path(), TargetArch, Args)) {
+                                    LI->path(), TargetTriple, Args)) {
         GCCMultiarchSuffix = MultiarchSuffix;
       } else {
         if (NeedsMultiarchSuffix ||
diff --git a/lib/Driver/ToolChains.h b/lib/Driver/ToolChains.h
index f6de326..9448551 100644
--- a/lib/Driver/ToolChains.h
+++ b/lib/Driver/ToolChains.h
@@ -108,7 +108,7 @@ protected:
       SmallVectorImpl<StringRef> &MultiarchLibDirs,
       SmallVectorImpl<StringRef> &MultiarchTripleAliases);
 
-    void ScanLibDirForGCCTriple(llvm::Triple::ArchType TargetArch,
+    void ScanLibDirForGCCTriple(const llvm::Triple &TargetTriple,
                                 const ArgList &Args,
                                 const std::string &LibDir,
                                 StringRef CandidateTriple,
-- 
1.8.3

