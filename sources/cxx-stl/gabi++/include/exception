// Copyright (C) 2011 The Android Open Source Project
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the project nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

#ifndef __GABIXX_EXCEPTION__
#define __GABIXX_EXCEPTION__

#include "gabixx_config.h"

#if !defined(GABIXX_LIBCXX)

namespace std {

  class exception {
  public:
    exception() _GABIXX_NOEXCEPT;
    virtual ~exception() _GABIXX_NOEXCEPT;
    virtual const char* what() const _GABIXX_NOEXCEPT;
  };

  class bad_exception : public exception {
  public:
    bad_exception() _GABIXX_NOEXCEPT;
    virtual ~bad_exception() _GABIXX_NOEXCEPT;
    virtual const char* what() const _GABIXX_NOEXCEPT;
  };

  typedef void (*terminate_handler)();
  terminate_handler get_terminate() _GABIXX_NOEXCEPT;
  terminate_handler set_terminate(terminate_handler f) _GABIXX_NOEXCEPT;
  void terminate() _GABIXX_NORETURN;

  typedef void (*unexpected_handler)();
  unexpected_handler get_unexpected() _GABIXX_NOEXCEPT;
  unexpected_handler set_unexpected(unexpected_handler f) _GABIXX_NOEXCEPT;
  void unexpected() _GABIXX_NORETURN;

  bool uncaught_exception() _GABIXX_NOEXCEPT;

  // exception_ptr is used to pass exception references from one thread
  // to another. See 
  class exception_ptr {
    void* _ptr;

    explicit exception_ptr(void* ptr) : _ptr(ptr) {}

  public:
    exception_ptr() _GABIXX_NOEXCEPT : _ptr(0) {}
    exception_ptr(const exception_ptr&) _GABIXX_NOEXCEPT;
    exception_ptr& operator=(const exception_ptr&) _GABIXX_NOEXCEPT;
#if __cplusplus >= 201103L
    exception_ptr(nullptr_t) _GABIXX_NOEXCEPT : _ptr(0) {}

    exception_ptr(exception_ptr&& other) _GABIX_NOEXCEPT
        : _ptr(other._ptr) {
      other._ptr = NULL;
    }
#endif
    ~exception_ptr() _GABIXX_NOEXCEPT;

    operator bool() const _GABIXX_NOEXCEPT {
      return _ptr != 0;
    }

    friend bool operator==(const exception_ptr& a, exception_ptr& b)
        _GABIXX_NOEXCEPT {
      return a._ptr == b._ptr;
    }

    friend bool operator!=(const exception_ptr& a, exception_ptr& b)
        _GABIXX_NOEXCEPT {
      return a._ptr != b._ptr;
    }

    friend exception_ptr current_exception() _GABIXX_NOEXCEPT;
    friend void rethrow_exception(exception_ptr);
  };

  exception_ptr current_exception() _GABIXX_NOEXCEPT;
  void rethrow_exception(exception_ptr) _GABIXX_NORETURN;

#if _GABIXX_HAS_EXCEPTIONS
  template <class E>
  exception_ptr make_exception_ptr(E e) _GABIXX_NOEXCEPT {
    try {
      throw e;
    }
    catch (...) {
      return current_exception();
    }
  }
#else   // !_GABIXX_HAS_EXCEPTIONS
  template <class E>
  exception_ptr make_exception_ptr(E e) _GABIXX_NOEXCEPT {
    return exception_ptr();
  }
#endif  // !_GABIXX_NO_EXCEPTIONS

 // TODO(digit): Support nested_exception

} // namespace std

#endif  // !defined(GABIXX_LIBCXX)

#endif // __GABIXX_EXCEPTION__
