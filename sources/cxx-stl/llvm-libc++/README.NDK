This is a copy of LLVM's libc++ project, slightly modified to build
with this NDK. *EXPERIMENTAL* *BROKEN* *DO* *NOT* *USE*.

Upstream: http://llvm.org/svn/llvm-project/libcxx/trunk@180916
Patches: see patches.android/
Tracking: 36496

This is a version of LLVM's libc++ that was modified to be built
with GAbi++. At the moment, only linking a small test executable is
supported, and it will very likely crash as soon as you start it.

It also includes Android-specific support code, providing missing C
library functionality, under android/support. Most of the code there
consists in stubs waiting for a real implementation.

All patches are under patches.android/ to make it easier to update
the upstream revision of the library while working on this.

You need a recent NDK release, one which provides a version
of the GAbi++ C++ runtime that supports rtti _and_ exceptions.

Build instructions:

  1/ Set NDK to the path of a recent Android NDK install path
     (Use Android NDK r8e or above), e.g.:

      NDK=$HOME/android/ndk-r8e

  2/ From the top-level directory, do:

      $NDK/ndk-build -C android/test

     This is actually equivalent to:

      cd android/test
      $NDK/ndk-build

  3/ To see build commands, use V=1, as in:

      $NDK/ndk-build -C android/test V=1


Android support files:

  android/support/include:
     Android system header wrappers, to add missing declarations

  android/support/src:
     Put the implementation of the missing system functions here.

  Android.mk:
     Main build file for the library. This builds one static and
     one shared version of the library.

     If modifications are not obvious, read $NDK/docs/ANDROID-MK.html
     for a description of the Android.mk format.

  android/test/jni:
     NDK build project for two test programs that link against the
     static and shared versions of the library.

     See the Android.mk and Application.mk files in this directory
     if you want to add new test files.


Toolchain selection:
  By default, ndk-build tries to build with GCC 4.6, however, experimental
  versions of GCC 4.7 and Clang 3.1 are available with recent NDK releases.

  Use the NDK_TOOLCHAIN_VERSION environment variable to switch to a
  different one, valid examples:


    export NDK_TOOLCHAIN_VERSION=4.6    # this is the default
    $NDK/ndk-build -C android/test

    # This is equivalent, but for GCC 4.7
    $NDK/ndk-build -C android/test NDK_TOOLCHAIN_VERSION=4.7

    # Also equivalent, but for Clang 3.1
    NDK_TOOLCHAIN_VERSION=Clang3.1 $NDK/ndk-build -C android/test


Updating the sources to a newer revision:

  Follow these steps to create a new working directory containing both
  SVN and GIT repositories corresponding to the upstream:

    UPSTREAM=180916
    svn co http://llvm.org/svn/llvm-project/libcxx/trunk@$UPSTREAM libcxx
    cd libcxx
    git add .
    echo ".svn" > .gitignore
    git add -f .gitignore
    git init -m "upstream $REVISION"

  Create an 'android' branch and apply the Android-specific patches there:
    git checkout -t -b master android
    git am $NDK/sources/cxx-stl/llvm-libc++/patches.android/*

  Create a 'tag' to remember its content:
    git tag android-0 HEAD

  Switch to the master branch and update it to the latest revision:
    git checkout master
    svn update
    git add .
    git ls-files -d | xargs git rm -f
    git commit -m "upstream <new-revision>"

  Switch back to the Android branch and rebase it to the new upstream:
    git checkout android
    git rebase upstream

  Solve any rebase conflicts if any. If some changes require more Android
  patches, fix them.

  Create the new list of Android-specific patches.
    rm -rf /tmp/libc++-android-patches
    git format-patch -k -o /tmp/libc++-android-patches/ upstream

  Create a set of patches for all the changes:
    rm -rf /tmp/libc++-android-changes
    git format-patch -k -o /tmp/libc++-android-changes/ android-0

  Apply it to your NDK repository:
    cd $NDK/sources/cxx-stl/llvm-libc++/libcxx
    git am /tmp/libc++-android-changes/*

  Copy the new patch set over:
    cd $NDK/sources/cxx-stl/llvm-libc++/
    git rm patches.android/*
    cp /tmp/libc++-android-patches/* patches.android/
    git add patches.android/

  Update the "Upstream:" line at the top of this file with the new
  upstream revision number.
