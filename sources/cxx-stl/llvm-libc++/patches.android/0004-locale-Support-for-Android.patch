From ed425cbb4c1564f4ff50d0aabbd772636cf915d7 Mon Sep 17 00:00:00 2001
From: David 'Digit' Turner <digit@google.com>
Date: Thu, 2 May 2013 14:12:35 +0200
Subject: locale: Support for Android.

Note that this relies on the android support library headers
and implementation, not the Bionic one which are too buggy to
support wchar_t and locales properly.
---
 include/__locale | 21 ++++++++++++++++++---
 src/locale.cpp   |  6 +++---
 2 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/include/__locale b/include/__locale
index 24d565b..d0bd099 100644
--- a/include/__locale
+++ b/include/__locale
@@ -369,7 +369,22 @@ public:
     static const mask punct  = _ISPUNCT;
     static const mask xdigit = _ISXDIGIT;
     static const mask blank  = _ISBLANK;
-#else  // __GLIBC__ || _WIN32 || __APPLE__ || __FreeBSD__ || EMSCRIPTEN || __sun__
+#elif defined(__ANDROID__)
+    // NOTE: These match the musl values for __ctype_b_loc() which
+    //       themselve match the GLibc values. Values below are only
+    //       valid for little-endian systems.
+    typedef unsigned short mask;
+    static const mask space  = 0x2000;
+    static const mask print  = 0x4000;
+    static const mask cntrl  = 0x0002;
+    static const mask upper  = 0x0100;
+    static const mask lower  = 0x0200;
+    static const mask alpha  = 0x0400;
+    static const mask digit  = 0x0800;
+    static const mask punct  = 0x0002;
+    static const mask xdigit = 0x1000;
+    static const mask blank  = 0x0001;
+#else  // __ANDROID__
     typedef unsigned long mask;
     static const mask space  = 1<<0;
     static const mask print  = 1<<1;
@@ -381,7 +396,7 @@ public:
     static const mask punct  = 1<<7;
     static const mask xdigit = 1<<8;
     static const mask blank  = 1<<9;
-#endif  // __GLIBC__ || _WIN32 || __APPLE__ || __FreeBSD__
+#endif  // __GLIBC__ || _WIN32 || __APPLE__ || __FreeBSD__ || EMSCRIPTEN || __sun__ || __ANDROID__
     static const mask alnum  = alpha | digit;
     static const mask graph  = alnum | punct;
 
@@ -592,7 +607,7 @@ public:
 #endif
     _LIBCPP_ALWAYS_INLINE const mask* table() const  _NOEXCEPT {return __tab_;}
     static const mask* classic_table()  _NOEXCEPT;
-#if defined(__GLIBC__) || defined(EMSCRIPTEN)
+#if defined(__GLIBC__) || defined(EMSCRIPTEN) || defined(__ANDROID__)
     static const int* __classic_upper_table() _NOEXCEPT;
     static const int* __classic_lower_table() _NOEXCEPT;
 #endif
diff --git a/src/locale.cpp b/src/locale.cpp
index 49c1cf2..3a9e07f 100644
--- a/src/locale.cpp
+++ b/src/locale.cpp
@@ -978,7 +978,7 @@ ctype<char>::do_narrow(const char_type* low, const char_type* high, char dfault,
     return low;
 }
 
-#ifdef EMSCRIPTEN
+#if defined(EMSCRIPTEN) || defined(__ANDROID__)
 extern "C" const unsigned short ** __ctype_b_loc();
 extern "C" const int ** __ctype_tolower_loc();
 extern "C" const int ** __ctype_toupper_loc();
@@ -997,7 +997,7 @@ ctype<char>::classic_table()  _NOEXCEPT
     return _ctype+1; // internal ctype mask table defined in msvcrt.dll
 // This is assumed to be safe, which is a nonsense assumption because we're
 // going to end up dereferencing it later...
-#elif defined(EMSCRIPTEN)
+#elif defined(EMSCRIPTEN) || defined(__ANDROID__)
     return *__ctype_b_loc();
 #else
     // Platform not supported: abort so the person doing the port knows what to
@@ -1022,7 +1022,7 @@ ctype<char>::__classic_upper_table() _NOEXCEPT
 }
 #endif // __GLIBC__
 
-#if defined(EMSCRIPTEN)
+#if defined(EMSCRIPTEN) || defined(__ANDROID__)
 const int*
 ctype<char>::__classic_lower_table() _NOEXCEPT
 {
-- 
1.7.12.146.g16d26b1

